<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
	default-lazy-init="true">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/property/jdbc.properties</value>
            </list>
        </property>
    </bean>
    
    <!-- boneCp配置 -->
 	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">  

        <!-- 数据库驱动 -->  
        <property name="driverClass" value="${driverClassName}" />  

        <!-- 相应驱动的jdbcUrl,你懂的 -->  
        <property name="jdbcUrl" value="${url}" />  

        <!-- 数据库的用户名 -->  
        <property name="username" value="${username}" />  

        <!-- 数据库的密码 -->  
        <property name="password" value="${password}" />  

        <!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->  
        <!-- <property name="idleConnectionTestPeriod" value="${aliLibrary.db.idleConnectionTestPeriod}" /> -->  

        <!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->  
        <!-- <property name="idleMaxAge" value="${aliLibrary.db.idleMaxAge}" /> -->  

        <!-- 每个分区最大的连接数 -->  
        <!-- <property name="maxConnectionsPerPartition" value="${aliLibrary.db.maxConnectionsPerPartition}" /> -->  

        <!-- 每个分区最小的连接数 -->  
        <!-- <property name="minConnectionsPerPartition" value="${aliLibrary.db.minConnectionsPerPartition}" /> -->  

        <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->  
        <!-- <property name="partitionCount" value="${aliLibrary.db.partitionCount}" /> -->  

        <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->  
        <!-- <property name="acquireIncrement" value="${aliLibrary.db.acquireIncrement}" />  --> 

        <!-- 缓存prepared statements的大小，默认值：0 -->  
        <!-- <property name="statementsCacheSize" value="${aliLibrary.db.statementsCacheSize}" />   -->

        <!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->  
       <!--  <property name="releaseHelperThreads" value="${aliLibrary.db.releaseHelperThreads}" />   -->

    </bean>  
	
	<!-- MyBatis Mapper.XMl 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	    <property name="configLocation" value="classpath:config/mybatis.xml" />
	    <property name="mapperLocations">
			<list>
			<!-- 自动匹配Mapper映射文件  -->
				<value>classpath:mapper/**/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xinnet.**.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
	<!-- 支持文件上传相关 -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/> -->
   
    <!-- ***************事务配置************** -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
  	<aop:config>  
    	<aop:advisor pointcut="execution(* com.xinnet..service..*.*(..))"  advice-ref="txAdvice" />  
    </aop:config>  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="get*" read-only="true" />  
            <tx:method name="query*" read-only="true" />  
            <tx:method name="find*" read-only="true" />  
            <tx:method name="load*" read-only="true" />
            <tx:method name="select*" read-only="true" /> 
            <tx:method name="count*" read-only="true" />  
            <tx:method name="search*" read-only="true" />  
            <tx:method name="list*" read-only="true" />  
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />  
        </tx:attributes>  
    </tx:advice>  
    <!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
    <!-- 开启注解事务 只对当前配置文件有效 -->
  	
    <!-- 扫描注解Bean -->
    <context:component-scan base-package="com.xinnet">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>  
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
     <!-- 隐式地向 Spring 容器注册 -->
	<context:annotation-config/> 
	
</beans>
